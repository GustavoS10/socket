import socket
import threading
import os
import re

BUFFER_SIZE = 100


def is_valid_file_info(file_info):
    pattern = r'^[^:]+:\d+$'
    return bool(re.match(pattern, file_info))


def handle_client(client_socket, client_address):
    print("Connection from", client_address)

    try:
        # Receive the file name and file size
        file_info = client_socket.recv(BUFFER_SIZE).decode()

        if not is_valid_file_info(file_info):
            raise ValueError("Invalid file info received")

        file_name, file_size = file_info.split(':')
        file_size = int(file_size)

        # Create a directory for the received files
        directory = "Recebidos do cliente"
        if not os.path.exists(directory):
            os.makedirs(directory)

        # Create a directory for the current client
        client_directory = os.path.join(directory, client_address[0])
        if not os.path.exists(client_directory):
            os.makedirs(client_directory)

        # Save the file to the client's directory
        file_path = os.path.join(client_directory, file_name)
        with open(file_path, 'wb') as file:
            bytes_received = 0
            while bytes_received < file_size:
                data = client_socket.recv(BUFFER_SIZE)
                if not data:
                    break
                file.write(data)
                bytes_received += len(data)
                print("Progress: {:.2f}%".format(bytes_received / file_size * 100))

        print("File received and saved:", file_path)
        # Send a confirmation response to the client
        response = "Arquivo recebido com sucesso!"
        client_socket.sendall(response.encode())

    except Exception as e:
        print(f"Error handling client {client_address}: {e}")

    finally:
        client_socket.close()


# Create a socket object
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to a specific address and port
server_address = ('localhost', 5001)
server_socket.bind(server_address)

# Start listening for incoming connections
server_socket.listen(2)

print("Server is listening on", server_address)

while True:
    # Accept a connection from a client
    client_socket, client_address = server_socket.accept()

    # Create a new thread to handle the client
    client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))
    client_thread.start()